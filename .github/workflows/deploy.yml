name: Deploy to Amazon ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

# Ensure only one deployment workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create SSM Parameters for secrets
      run: |
        # Generate a random app key if it doesn't exist
        if ! aws ssm get-parameter --name /laravel-app/app-key 2>/dev/null; then
          APP_KEY=$(openssl rand -base64 32)
          aws ssm put-parameter \
            --name /laravel-app/app-key \
            --value "base64:$APP_KEY" \
            --type SecureString \
            --overwrite
        fi
        
        # Store database password
        aws ssm put-parameter \
          --name /laravel-app/db-password \
          --value "rootpassword" \
          --type SecureString \
          --overwrite

    - name: Create ECS Service Linked Role if it doesn't exist
      run: |
        # Check if the role already exists
        if ! aws iam get-role --role-name AWSServiceRoleForECS 2>/dev/null; then
          echo "Creating ECS Service Linked Role..."
          aws iam create-service-linked-role --aws-service-name ecs.amazonaws.com
        else
          echo "ECS Service Linked Role already exists."
        fi

    - name: Check if ECR repository exists and create if needed
      run: |
        # Check if ECR repository exists
        if ! aws ecr describe-repositories --repository-names laravel-app &> /dev/null; then
          echo "Creating ECR repository..."
          aws ecr create-repository --repository-name laravel-app
        else
          echo "ECR repository already exists."
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Calculate Docker image hash
      id: docker-hash
      run: |
        # Create a hash based on the content of files that affect the Docker image
        # Adjust the find command to include all relevant files for your application
        DOCKER_HASH=$(find . -type f \( -name "Dockerfile" -o -name "*.php" -o -name "composer.*" -o -name "nginx/default.conf" \) -print0 | sort -z | xargs -0 sha256sum | sha256sum | cut -d' ' -f1)
        echo "::set-output name=hash::$DOCKER_HASH"
        echo "Docker image hash: $DOCKER_HASH"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: laravel-app
        IMAGE_TAG: ${{ steps.docker-hash.outputs.hash }}
      run: |
        # Check if image with this hash already exists in ECR
        if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG &> /dev/null; then
          echo "Image with content hash $IMAGE_TAG already exists in ECR. Skipping build and push."
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        else
          echo "Building and pushing new image with content hash $IMAGE_TAG..."
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        fi

    - name: Deploy CloudFormation stack
      run: |
        # Set stack name
        AWS_STACK_NAME="laravel-app-stack-new"
        
        # Get the ECR repository URI
        ECR_REPO_URI="${{ steps.login-ecr.outputs.registry }}/laravel-app"
        IMAGE_TAG="${{ steps.docker-hash.outputs.hash }}"
        
        # Check if stack exists and get its status
        if aws cloudformation describe-stacks --stack-name "$AWS_STACK_NAME" &> /dev/null; then
          # Check the current stack status
          CURRENT_STATUS=$(aws cloudformation describe-stacks --stack-name "$AWS_STACK_NAME" --query "Stacks[0].StackStatus" --output text)
          
          echo "Stack exists with status: $CURRENT_STATUS"
          
          if [[ "$CURRENT_STATUS" == "CREATE_COMPLETE" || "$CURRENT_STATUS" == "UPDATE_COMPLETE" || "$CURRENT_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
            # Stack exists and is in a stable state, update it
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name "$AWS_STACK_NAME" \
              --template-body file://cloudformation.yml \
              --parameters \
                ParameterKey=ECRRepositoryUri,ParameterValue=$ECR_REPO_URI \
                ParameterKey=ImageTag,ParameterValue=$IMAGE_TAG \
              --capabilities CAPABILITY_IAM \
              || echo "No updates to be performed."
          else
            # Stack exists but is in an unstable state (like ROLLBACK_COMPLETE), delete it first
            echo "Stack is in state $CURRENT_STATUS. Deleting and recreating..."
            
            # Delete the stack
            aws cloudformation delete-stack --stack-name "$AWS_STACK_NAME"
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$AWS_STACK_NAME"
            
            # Create a new stack
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name "$AWS_STACK_NAME" \
              --template-body file://cloudformation.yml \
              --parameters \
                ParameterKey=ECRRepositoryUri,ParameterValue=$ECR_REPO_URI \
                ParameterKey=ImageTag,ParameterValue=$IMAGE_TAG \
              --capabilities CAPABILITY_IAM
            
            echo "Waiting for stack creation to complete..."
            aws cloudformation wait stack-create-complete --stack-name "$AWS_STACK_NAME"
          fi
        else
          # Stack doesn't exist, create it
          echo "Stack doesn't exist. Creating new stack..."
          aws cloudformation create-stack \
            --stack-name "$AWS_STACK_NAME" \
            --template-body file://cloudformation.yml \
            --parameters \
              ParameterKey=ECRRepositoryUri,ParameterValue=$ECR_REPO_URI \
              ParameterKey=ImageTag,ParameterValue=$IMAGE_TAG \
            --capabilities CAPABILITY_IAM
          
          echo "Waiting for stack creation to complete..."
          aws cloudformation wait stack-create-complete --stack-name "$AWS_STACK_NAME"
        fi
        
        # Check final stack status
        FINAL_STATUS=$(aws cloudformation describe-stacks --stack-name "$AWS_STACK_NAME" --query "Stacks[0].StackStatus" --output text)
        echo "Final stack status: $FINAL_STATUS"
        
        # If the stack is in a failed state, exit with an error
        if [[ "$FINAL_STATUS" == *FAILED* || "$FINAL_STATUS" == *ROLLBACK* ]]; then
          echo "Stack operation failed with status: $FINAL_STATUS"
          exit 1
        fi

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster laravel-app-cluster --service laravel-app-service --force-new-deployment

    - name: Wait for service to stabilize
      run: |
        aws ecs wait services-stable --cluster laravel-app-cluster --services laravel-app-service

    - name: Get EC2 instance ID
      id: get-instance
      run: |
        # Get the EC2 instance ID from the Auto Scaling Group
        INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $(aws cloudformation describe-stack-resources \
            --stack-name laravel-app-stack-new \
            --logical-resource-id ECSAutoScalingGroup \
            --query "StackResources[0].PhysicalResourceId" \
            --output text) \
          --query "AutoScalingGroups[0].Instances[0].InstanceId" \
          --output text)
        echo "::set-output name=instance-id::$INSTANCE_ID"
        echo "EC2 Instance ID: $INSTANCE_ID"

    - name: Run database migrations
      run: |
        # Get the ECS task ARN
        TASK_ARN=$(aws ecs list-tasks \
          --cluster laravel-app-cluster \
          --service-name laravel-app-service \
          --query 'taskArns[0]' \
          --output text)
        
        if [ "$TASK_ARN" != "None" ] && [ ! -z "$TASK_ARN" ]; then
          # Wait a bit for the container to be ready
          echo "Waiting for container to be ready..."
          sleep 30
          
          # Run migrations using ECS Execute Command
          echo "Running database migrations"
          aws ecs execute-command \
            --cluster laravel-app-cluster \
            --task $TASK_ARN \
            --container app \
            --command "/bin/sh -c 'cd /var/www && php artisan migrate --force'" \
            --interactive || echo "Migration command failed, container might not be ready yet"
        else
          echo "No ECS tasks found, skipping migrations"
        fi

    - name: Print application URL
      run: |
        echo "Application deployed successfully!"
        echo "URL: http://$(aws cloudformation describe-stacks \
          --stack-name laravel-app-stack-new \
          --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" \
          --output text)"
        echo "WARNING: Stack will be automatically deleted after 30 minutes to avoid charges!"

    - name: Schedule stack deletion
      run: |
        # Schedule stack deletion after 30 minutes
        echo "Scheduling stack deletion after 30 minutes..."
        aws cloudformation delete-stack --stack-name "$AWS_STACK_NAME"
