AWSTemplateFormatVersion: '2010-09-09'
Description: 'Laravel App Infrastructure on AWS Free Tier'

Parameters:
  ECRRepositoryUri:
    Type: String
    Description: URI of the ECR repository containing the Laravel application image
  ImageTag:
    Type: String
    Default: latest
    Description: The tag for the Docker image

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: LaravelVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Laravel IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # EC2 Instance Role for ECS
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: laravel-app-cluster

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECSTaskExecutionRoleCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # SSM Parameter Store access
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/laravel-app/*
              
              # ECR access (already included in managed policy, but added for completeness)
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
              
              # CloudWatch Logs access (already included in managed policy, but added for completeness)
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/laravel-app:*
              
              # KMS access (if your SSM parameters are encrypted with a custom KMS key)
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: '*'
                Condition:
                  StringEquals:
                    'kms:ViaService': !Sub 'ssm.${AWS::Region}.amazonaws.com'

  # Security Groups
  ECSInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 32768
          ToPort: 65535
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH access from anywhere (consider restricting this in production)

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # RDS Database (Free Tier eligible)
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: laravel
      Engine: mysql
      EngineVersion: '8.0'  # Updated to MySQL 8.0
      DBInstanceClass: db.t3.micro  # Updated to t3.micro which is supported
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: root
      MasterUserPassword: '{{resolve:ssm-secure:/laravel-app/db-password:1}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      MultiAZ: false
      PubliclyAccessible: false
      BackupRetentionPeriod: 0
      DeletionProtection: false

  # Classic Load Balancer
  ClassicLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      CrossZone: true

  # EC2 Launch Template for ECS
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ECSLaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-0c1f6bd8860697cd6  # Amazon ECS-optimized AMI for eu-central-1
        InstanceType: t2.micro  # Free tier eligible
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
          - !Ref ECSInstanceSecurityGroup
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            SubnetId: !Ref PublicSubnet1
            Groups:
              - !Ref ECSInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            # Install EC2 Instance Connect
            yum install -y ec2-instance-connect
            # Enable SSH connections
            sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
            systemctl restart sshd
            # Complete setup
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  # Auto Scaling Group for ECS
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: ECS Instance
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  # ECS Capacity Provider
  ECSCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ClassicLoadBalancer
    Properties:
      ServiceName: laravel-app-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: EC2  # Explicitly set to EC2
      HealthCheckGracePeriodSeconds: 600  # Give containers time to start up
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - LoadBalancerName: !Ref ClassicLoadBalancer
          ContainerName: nginx
          ContainerPort: 80

  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: laravel-app
      NetworkMode: bridge  # Bridge mode is required for Classic Load Balancer with EC2 launch type
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        # Initialization container to copy static files to shared volume
        - Name: init
          Image: !Join 
            - ''
            - - !Ref ECRRepositoryUri
              - ':'
              - !Ref ImageTag
          Essential: false
          MemoryReservation: 64
          Command: 
            - "/bin/sh"
            - "-c"
            - "mkdir -p /shared && cp -r /var/www/public/* /shared/ && mkdir -p /nginx-conf && cp -r /var/www/docker-entrypoint.d/nginx-conf/* /nginx-conf/"
          MountPoints:
            - SourceVolume: shared-data
              ContainerPath: /shared
            - SourceVolume: nginx-conf
              ContainerPath: /nginx-conf
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

        # Laravel App Container
        - Name: app
          Image: !Join 
            - ''
            - - !Ref ECRRepositoryUri
              - ':'
              - !Ref ImageTag
          Essential: true
          Memory: 384
          MemoryReservation: 192
          DependsOn:
            - ContainerName: init
              Condition: SUCCESS
          PortMappings:
            - ContainerPort: 9000
              HostPort: 9000  # Fixed port for PHP-FPM
          Environment:
            - Name: APP_ENV
              Value: production
            - Name: DB_HOST
              Value: !GetAtt RDSInstance.Endpoint.Address
            - Name: DB_DATABASE
              Value: laravel
            - Name: DB_USERNAME
              Value: root
          Secrets:
            - Name: APP_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/laravel-app/app-key
            - Name: DB_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/laravel-app/db-password
          HealthCheck:
            Command:
              - CMD-SHELL
              - php -v || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 120
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

        # Nginx Container
        - Name: nginx
          Image: nginx:alpine
          Essential: true
          Memory: 192
          MemoryReservation: 96
          DependsOn:
            - ContainerName: init
              Condition: SUCCESS
          PortMappings:
            - ContainerPort: 80
              HostPort: 80  # Fixed port for Nginx to work with Classic Load Balancer
          MountPoints:
            - SourceVolume: shared-data
              ContainerPath: /var/www/public
              ReadOnly: true
            - SourceVolume: nginx-conf
              ContainerPath: /etc/nginx/conf.d
          Links:
            - app
          HealthCheck:
            Command:
              - CMD-SHELL
              - nginx -t || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 120
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
      Volumes:
        - Name: shared-data
        - Name: nginx-conf

  # CloudWatch Logs
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/laravel-app
      RetentionInDays: 7

  # Auto-deletion after 60 minutes
  # Lambda Role for stack deletion
  StackDeletionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudFormationDeleteStack
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: cloudformation:DeleteStack
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
              - Effect: Allow
                Action:
                  - ec2:*
                  - ecs:*
                  - lambda:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - logs:*
                  - iam:*
                  - events:*
                  - rds:*
                Resource: '*'

  # Lambda function to delete the stack
  StackDeletionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt StackDeletionRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import os
          import cfnresponse
          import time
          
          def handler(event, context):
              # If this is a CloudFormation custom resource event, handle it
              if 'RequestType' in event:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return
                  
              # Otherwise, delete the stack
              stack_name = os.environ['STACK_NAME']
              cf_client = boto3.client('cloudformation')
              
              # Check if stack exists
              try:
                  cf_client.describe_stacks(StackName=stack_name)
                  print(f"Deleting stack {stack_name}")
                  
                  # Delete with termination protection disabled
                  try:
                      cf_client.update_termination_protection(
                          EnableTerminationProtection=False,
                          StackName=stack_name
                      )
                  except Exception as e:
                      print(f"Error disabling termination protection: {str(e)}")
                  
                  # Attempt to delete the stack
                  try:
                      cf_client.delete_stack(StackName=stack_name)
                      return {
                          'statusCode': 200,
                          'body': f'Stack {stack_name} deletion initiated'
                      }
                  except Exception as e:
                      print(f"Error deleting stack: {str(e)}")
                      return {
                          'statusCode': 500,
                          'body': f'Error deleting stack: {str(e)}'
                      }
              except Exception as e:
                  print(f"Stack {stack_name} not found or error: {str(e)}")
                  return {
                      'statusCode': 404,
                      'body': f'Stack {stack_name} not found or error: {str(e)}'
                  }
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName

  # EventBridge rule to trigger the Lambda function after 60 minutes
  StackDeletionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger stack deletion after 60 minutes
      ScheduleExpression: rate(60 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt StackDeletionFunction.Arn
          Id: StackDeletionTarget

  # Permission for EventBridge to invoke Lambda
  StackDeletionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StackDeletionFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StackDeletionRule.Arn

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"

  ECSCluster:
    Description: ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ECSCluster"

  ECSService:
    Description: ECS Service
    Value: !Ref ECSService
    Export:
      Name: !Sub "${AWS::StackName}-ECSService"

  LoadBalancerDNS:
    Description: Load Balancer DNS
    Value: !GetAtt ClassicLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNS"

  RDSEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RDSEndpoint"

  AutoDeletionWarning:
    Description: Warning about auto-deletion
    Value: "WARNING: This stack will automatically delete itself after 60 minutes to avoid unexpected charges!"
