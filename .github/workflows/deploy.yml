name: Deploy to Amazon ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

# Ensure only one deployment workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create SSM Parameters for secrets
      run: |
        # Generate a random app key if it doesn't exist
        if ! aws ssm get-parameter --name /laravel-app/app-key 2>/dev/null; then
          APP_KEY=$(openssl rand -base64 32)
          aws ssm put-parameter \
            --name /laravel-app/app-key \
            --value "base64:$APP_KEY" \
            --type SecureString \
            --overwrite
        fi
        
        # Store database password
        aws ssm put-parameter \
          --name /laravel-app/db-password \
          --value "${{ secrets.DB_APP_ROOT_PASSWORD }}" \
          --type SecureString \
          --overwrite

    - name: Create ECS Service Linked Role if it doesn't exist
      run: |
        # Check if the role already exists
        if ! aws iam get-role --role-name AWSServiceRoleForECS 2>/dev/null; then
          echo "Creating ECS Service Linked Role..."
          aws iam create-service-linked-role --aws-service-name ecs.amazonaws.com
        else
          echo "ECS Service Linked Role already exists."
        fi

    - name: Check if ECR repository exists and create if needed
      run: |
        # Check if ECR repository exists
        if ! aws ecr describe-repositories --repository-names laravel-app &> /dev/null; then
          echo "Creating ECR repository..."
          aws ecr create-repository --repository-name laravel-app
        else
          echo "ECR repository already exists."
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Calculate Docker image hash
      id: docker-hash
      run: |
        # Create a hash based on the content of files that affect the Docker image
        # Adjust the find command to include all relevant files for your application
        DOCKER_HASH=$(find . -type f \( -name "Dockerfile" -o -name "*.php" -o -name "composer.*" -o -name "nginx/default.conf" \) -print0 | sort -z | xargs -0 sha256sum | sha256sum | cut -d' ' -f1)
        echo "::set-output name=hash::$DOCKER_HASH"
        echo "Docker image hash: $DOCKER_HASH"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: laravel-app
        IMAGE_TAG: ${{ steps.docker-hash.outputs.hash }}
      run: |
        # Check if image with this hash already exists in ECR
        if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG &> /dev/null; then
          echo "Image with content hash $IMAGE_TAG already exists in ECR. Skipping build and push."
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        else
          echo "Building and pushing new image with content hash $IMAGE_TAG..."
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        fi

    - name: Deploy CloudFormation stack
      run: |
        # Set stack name
        AWS_STACK_NAME="laravel-app-stack"
        
        # Get the ECR repository URI
        ECR_REPO_URI="${{ steps.login-ecr.outputs.registry }}/laravel-app"
        IMAGE_TAG="${{ steps.docker-hash.outputs.hash }}"
        
        # Check if stack exists
        if aws cloudformation describe-stacks --stack-name "$AWS_STACK_NAME" &> /dev/null; then
          # Stack exists, check its status
          CURRENT_STATUS=$(aws cloudformation describe-stacks --stack-name "$AWS_STACK_NAME" --query "Stacks[0].StackStatus" --output text)
          
          echo "Stack exists with status: $CURRENT_STATUS"
          
          # If stack is in progress, wait for it to complete
          if [[ "$CURRENT_STATUS" == *"_IN_PROGRESS" ]]; then
            echo "Stack is in progress. Waiting for it to complete..."
            
            # Wait for any in-progress operations to complete
            if [[ "$CURRENT_STATUS" == "CREATE_IN_PROGRESS" ]]; then
              aws cloudformation wait stack-create-complete --stack-name "$AWS_STACK_NAME" || true
            elif [[ "$CURRENT_STATUS" == "UPDATE_IN_PROGRESS" ]]; then
              aws cloudformation wait stack-update-complete --stack-name "$AWS_STACK_NAME" || true
            elif [[ "$CURRENT_STATUS" == "DELETE_IN_PROGRESS" ]]; then
              aws cloudformation wait stack-delete-complete --stack-name "$AWS_STACK_NAME" || true
            else
              # For other in-progress states, just wait a bit
              echo "Waiting for stack operation to complete..."
              sleep 60
            fi
            
            # Check status again after waiting
            CURRENT_STATUS=$(aws cloudformation describe-stacks --stack-name "$AWS_STACK_NAME" --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "DELETED")
            echo "Stack status after waiting: $CURRENT_STATUS"
          fi
          
          # If stack still exists (wasn't deleted during waiting), delete it
          if [[ "$CURRENT_STATUS" != "DELETED" ]]; then
            echo "Deleting existing stack..."
            aws cloudformation delete-stack --stack-name "$AWS_STACK_NAME"
            
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$AWS_STACK_NAME"
          fi
        fi
        
        # Create a new stack
        echo "Creating new stack..."
        aws cloudformation create-stack \
          --stack-name "$AWS_STACK_NAME" \
          --template-body file://cloudformation.yml \
          --parameters \
            ParameterKey=ECRRepositoryUri,ParameterValue=$ECR_REPO_URI \
            ParameterKey=ImageTag,ParameterValue=$IMAGE_TAG \
          --capabilities CAPABILITY_IAM
        
        echo "Waiting for stack creation to complete..."
        aws cloudformation wait stack-create-complete --stack-name "$AWS_STACK_NAME"
        
        # Check final stack status
        FINAL_STATUS=$(aws cloudformation describe-stacks --stack-name "$AWS_STACK_NAME" --query "Stacks[0].StackStatus" --output text)
        echo "Final stack status: $FINAL_STATUS"
        
        # If the stack is in a failed state, exit with an error
        if [[ "$FINAL_STATUS" == *FAILED* || "$FINAL_STATUS" == *ROLLBACK* ]]; then
          echo "Stack operation failed with status: $FINAL_STATUS"
          exit 1
        fi

    - name: Wait for ECS service to stabilize
      run: |
        # Configure AWS CLI to increase wait timeout
        mkdir -p ~/.aws
        echo '[defaults]' > ~/.aws/config
        echo 'region = eu-central-1' >> ~/.aws/config
        echo '[service ecs]' >> ~/.aws/config
        echo 'wait_timeout = 1800' >> ~/.aws/config
        
        # Wait for service to stabilize with increased timeout (30 minutes)
        echo "Waiting for ECS service to stabilize (up to 30 minutes)..."
        aws ecs wait services-stable \
          --cluster laravel-app-cluster \
          --services laravel-app-service

    - name: Get EC2 instance ID
      id: get-instance
      run: |
        # Get the EC2 instance ID from the Auto Scaling Group
        INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $(aws cloudformation describe-stack-resources \
            --stack-name laravel-app-stack \
            --logical-resource-id ECSAutoScalingGroup \
            --query "StackResources[0].PhysicalResourceId" \
            --output text) \
          --query "AutoScalingGroups[0].Instances[0].InstanceId" \
          --output text)
        echo "::set-output name=instance-id::$INSTANCE_ID"
        echo "EC2 Instance ID: $INSTANCE_ID"

    - name: Run database migrations
      run: |
        # Get the ECS task ARN
        TASK_ARN=$(aws ecs list-tasks \
          --cluster laravel-app-cluster \
          --service-name laravel-app-service \
          --query 'taskArns[0]' \
          --output text)
        
        if [ "$TASK_ARN" != "None" ] && [ ! -z "$TASK_ARN" ]; then
          # Wait for the container to be ready with a better check
          echo "Waiting for container to be ready..."
          
          # Wait for task to reach RUNNING state
          aws ecs wait tasks-running \
            --cluster laravel-app-cluster \
            --tasks $TASK_ARN
          
          # Additional wait for container initialization - increased to 2 minutes
          echo "Task is running, waiting for container initialization..."
          sleep 120
          
          # Try to run migrations using ECS Execute Command with retries
          echo "Running database migrations"
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if aws ecs execute-command \
              --cluster laravel-app-cluster \
              --task $TASK_ARN \
              --container app \
              --command "/bin/sh -c 'cd /var/www && php artisan migrate --force --seed'" \
              --interactive; then
              echo "Migrations completed successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Migration attempt $RETRY_COUNT failed, retrying in 30 seconds..."
                sleep 30
              else
                echo "All migration attempts via ECS execute-command failed, trying alternative approach"
              fi
            fi
          done
          
          # If we've exhausted retries, use SSM as fallback
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            # Get instance ID
            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=tag:aws:autoscaling:groupName,Values=$(aws cloudformation describe-stack-resources \
                --stack-name laravel-app-stack \
                --logical-resource-id ECSAutoScalingGroup \
                --query "StackResources[0].PhysicalResourceId" \
                --output text)" \
              --query "Reservations[0].Instances[0].InstanceId" \
              --output text)
            
            echo "Will try to run migrations via SSM on instance $INSTANCE_ID"
            
            # Run command via SSM and capture command ID
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids $INSTANCE_ID \
              --document-name "AWS-RunShellScript" \
              --parameters commands="docker exec \$(docker ps -q --filter name=ecs-laravel-app.*-app) php artisan migrate --force --seed" \
              --comment "Run Laravel migrations" \
              --output text | grep COMMAND | awk '{print $2}')
            
            echo "Migration command sent via SSM with ID: $COMMAND_ID"
            
            # Wait for SSM command to complete
            echo "Waiting for SSM command to complete..."
            aws ssm wait command-executed --command-id $COMMAND_ID --instance-id $INSTANCE_ID
            
            # Check command status
            COMMAND_STATUS=$(aws ssm list-command-invocations \
              --command-id $COMMAND_ID \
              --details \
              --query "CommandInvocations[0].Status" \
              --output text)
            
            if [ "$COMMAND_STATUS" = "Success" ]; then
              echo "Migrations completed successfully via SSM"
            else
              echo "Migration via SSM failed with status: $COMMAND_STATUS"
              echo "Please check the AWS console for more details"
            fi
          fi
        else
          echo "No ECS tasks found, skipping migrations"
        fi

    - name: Print application URL
      run: |
        # Get the load balancer DNS name
        LB_DNS=$(aws cloudformation describe-stacks \
          --stack-name laravel-app-stack \
          --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" \
          --output text)
        
        # Split the output to avoid GitHub Actions masking
        echo "Application deployed successfully!"
        echo "URL: http://" # Print the protocol separately
        echo "$LB_DNS"      # Print the DNS name separately
        echo "Please copy and paste both parts to form the complete URL"
